.comp 920 000111010
.start _nostart_
.depend "_SystemEnumStrict" "20180913114337"
.depend "_SystemStrictLists" "20180913114337"
.depend "StdStrictLists" "20180913114337"
.depend "_SystemEnum" "20180913114337"
.depend "StdEnum" "20180913114337"
.depend "StdMisc" "20180913114337"
.depend "StdFunctions" "20180913114337"
.depend "StdCharList" "20180913114337"
.depend "StdTuple" "20180913114337"
.depend "StdOrdList" "20180913114337"
.depend "StdList" "20180913114337"
.depend "StdClass" "20180913114337"
.depend "StdFile" "20180913114337"
.depend "StdString" "20180913114337"
.depend "_SystemArray" "20180913114337"
.depend "StdArray" "20180913114337"
.depend "StdChar" "20180913114337"
.depend "StdReal" "20180913114337"
.depend "StdInt" "20180913114337"
.depend "StdOverloaded" "20180913114337"
.depend "StdBool" "20180913114337"
.depend "StdEnv" "20180913114337"
.depend "Parsing" "20190319183631"
.module m_Parsing "Parsing" "20190319183806"
.endinfo
.impmod _system
.implab _cycle_in_spine
.implab _type_error
.implab _hnf
.impdesc e_system_dind
.implab e_system_nind e_system_eaind
.impdesc e_system_dif
.implab e_system_nif e_system_eaif
.implab e_system_sif
.impdesc e_system_dAP
.implab e_system_nAP e_system_eaAP
.implab e_system_sAP
.impdesc ARRAY
.impdesc _Nil
.impdesc _Cons
.impdesc _Conss
.implab n_Conss ea_Conss
.impdesc _Consts
.implab n_Consts ea_Consts
.impdesc _Conssts
.implab n_Conssts ea_Conssts
.impdesc _Tuple
.impdesc d_S.1
.implab n_S.1 ea_S.1
.impdesc d_S.2
.implab n_S.2 ea_S.2
.impdesc d_S.3
.implab n_S.3 ea_S.3
.impdesc d_S.4
.implab n_S.4 ea_S.4
.impdesc d_S.5
.implab n_S.5 ea_S.5
.impdesc d_S.6
.implab n_S.6 ea_S.6
.implab _driver
.impmod StdMisc
.implab e_StdMisc_sabort
.impmod StdList
.implab e_StdList_sdrop
.implab e_StdList_slength;47
.implab e_StdList_stoString;79
.impmod StdFile
.impdesc e_StdFile_dfwrites
.implab e_StdFile_sfwrites
.implab e_StdFile_nfwrites
.impmod StdString
.implab e_StdString_s==;2
.implab e_StdString_s%;10
.implab e_StdString_s+++;11
.impmod _SystemArray
.impdesc e__SystemArray_dusize;23
.implab e__SystemArray_nusize;23
.impmod StdInt
.implab e_StdInt_s+;6
.implab e_StdInt_s-;7
.implab e_StdInt_sone;11
.implab e_StdInt_s<;17
.impmod StdBool
.implab e_StdBool_snot
.export e_Parsing_sparse
.descexp e_Parsing_dparse e_Parsing_nparse e_Parsing_lparse 3 0 "parse"
.a 0 a1
.o 2 0
e_Parsing_lparse
	repl_args 2 2
.o 3 0
a1
.d 3 0
	jsr ea1
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparse
.o 1 0
e_Parsing_nparse
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea1
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparse
	jsr_eval 4
.d 6 0
	jmp s1
.o 3 0
ea1
	jsr_eval 1
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s1
	eq_desc _Nil 0 4
	jmp_true case.1
	jmp case.2
case.1
	push_a 5
	buildB TRUE
	update_a 1 7
	updatepop_a 0 6
.d 2 0
	rtn
case.2
	push_args 4 2 2
	buildh _Nil 0
	update_a 0 7
	pop_a 1
	push_a 0
	jsr_eval 0
	push_array 0
	updatepop_a 0 1
	push_a 8
	push_a 7
	push_a 7
	push_a 7
	push_a 7
	push_a 5
	update_a 5 6
	update_a 0 5
	pop_a 1
	buildh _Nil 0
	update_a 0 14
	pop_a 1
.d 6 0
	jsr s15
.o 1 1 b
	push_b 0
	notB
	jmp_false else.3
	buildAC "\n"
	push_array 2
	pop_b 1
	update_a 1 10
	updatepop_a 0 9
.d 2 0
	jsr catAC
.o 1 0
	buildAC "failed to parse line "
.d 2 0
	jsr catAC
.o 1 0
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.3
	push_a 2
	jsr_eval 0
	push_a 1
	push_a 8
	push_a 8
	push_a 8
	push_a 8
	push_a 5
	update_a 5 6
	update_a 0 5
	pop_a 1
	update_a 5 14
	update_a 4 13
	update_a 3 12
	update_a 2 11
	update_a 1 10
	updatepop_a 0 9
	pop_b 1
.d 6 0
	jmp s1
.export e_Parsing_sparseLine
.descexp e_Parsing_dparseLine e_Parsing_nparseLine e_Parsing_lparseLine 3 0 "parseLine"
.a 0 a2
.o 2 0
e_Parsing_lparseLine
	repl_args 2 2
.o 3 0
a2
.d 3 0
	jsr ea2
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseLine
.o 1 0
e_Parsing_nparseLine
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea2
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseLine
	jsr_eval 4
	push_array 4
	update_a 0 5
	pop_a 1
.d 6 0
	jmp s2
.o 3 0
ea2
	jsr_eval 1
	jsr_eval 0
	push_array 1
	push_r_args 1 4 0
	update_a 4 6
	update_a 2 4
	update_a 0 2
	update_a 3 5
	update_a 1 3
	pop_a 2
.o 6 0
s2
	buildAC "\n"
	push_a 5
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_true then.4
	buildAC ""
	push_a 5
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.4
then.4
	push_a 5
	buildB TRUE
	update_a 1 7
	updatepop_a 0 6
.d 2 0
	rtn
else.4
	pushI 1
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "//"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.6
	push_a 5
	buildB TRUE
	update_a 1 7
	updatepop_a 0 6
.d 2 0
	rtn
else.6
	pushI 12
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "push constant"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.7
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s3
else.7
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "add"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.8
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s4
else.8
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "sub"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.9
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s5
else.9
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "neg"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.10
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s6
else.10
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "and"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.11
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s7
else.11
	pushI 1
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "or"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.12
	push_a 5
	jsr_eval 0
	push_a 5
	buildh ARRAY 1
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s8
else.12
	push_a 5
	buildB FALSE
	update_a 1 7
	updatepop_a 0 6
.d 2 0
	rtn
.export e_Parsing_sparseOrCommand
.descexp e_Parsing_dparseOrCommand e_Parsing_nparseOrCommand e_Parsing_lparseOrCommand 3 0 "parseOrCommand"
.a 0 a8
.o 2 0
e_Parsing_lparseOrCommand
	repl_args 2 2
.o 3 0
a8
.d 3 0
	jsr ea8
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseOrCommand
.o 1 0
e_Parsing_nparseOrCommand
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea8
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseOrCommand
	jsr_eval 5
.d 6 0
	jmp s8
.o 3 0
ea8
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s8
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.13
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.13
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//or instruction\nD=M\nA=A-1\nD=D|M\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.14
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.14
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.export e_Parsing_sparseAndCommand
.descexp e_Parsing_dparseAndCommand e_Parsing_nparseAndCommand e_Parsing_lparseAndCommand 3 0 "parseAndCommand"
.a 0 a7
.o 2 0
e_Parsing_lparseAndCommand
	repl_args 2 2
.o 3 0
a7
.d 3 0
	jsr ea7
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseAndCommand
.o 1 0
e_Parsing_nparseAndCommand
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea7
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseAndCommand
	jsr_eval 5
.d 6 0
	jmp s7
.o 3 0
ea7
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s7
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.15
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.15
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//and instruction\nD=M\nA=A-1\nD=D&M\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.16
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.16
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.export e_Parsing_sparseNegCommand
.descexp e_Parsing_dparseNegCommand e_Parsing_nparseNegCommand e_Parsing_lparseNegCommand 3 0 "parseNegCommand"
.a 0 a6
.o 2 0
e_Parsing_lparseNegCommand
	repl_args 2 2
.o 3 0
a6
.d 3 0
	jsr ea6
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseNegCommand
.o 1 0
e_Parsing_nparseNegCommand
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea6
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseNegCommand
	jsr_eval 5
.d 6 0
	jmp s6
.o 3 0
ea6
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s6
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.17
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.17
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//neg instruction\nM=-M\nD=M\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.18
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.18
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.export e_Parsing_sparseSubCommand
.descexp e_Parsing_dparseSubCommand e_Parsing_nparseSubCommand e_Parsing_lparseSubCommand 3 0 "parseSubCommand"
.a 0 a5
.o 2 0
e_Parsing_lparseSubCommand
	repl_args 2 2
.o 3 0
a5
.d 3 0
	jsr ea5
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseSubCommand
.o 1 0
e_Parsing_nparseSubCommand
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea5
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseSubCommand
	jsr_eval 5
.d 6 0
	jmp s5
.o 3 0
ea5
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s5
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.19
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.19
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//sub instruction\nD=M\nA=A-1\nD=M-D\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.20
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.20
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.export e_Parsing_sparseAddCommand
.descexp e_Parsing_dparseAddCommand e_Parsing_nparseAddCommand e_Parsing_lparseAddCommand 3 0 "parseAddCommand"
.a 0 a4
.o 2 0
e_Parsing_lparseAddCommand
	repl_args 2 2
.o 3 0
a4
.d 3 0
	jsr ea4
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparseAddCommand
.o 1 0
e_Parsing_nparseAddCommand
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea4
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparseAddCommand
	jsr_eval 5
.d 6 0
	jmp s4
.o 3 0
ea4
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s4
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.21
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.21
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//add instruction\nD=M\nA=A-1\nD=M+D\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.22
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.22
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.export e_Parsing_sparsePushConstant
.descexp e_Parsing_dparsePushConstant e_Parsing_nparsePushConstant e_Parsing_lparsePushConstant 3 0 "parsePushConstant"
.a 0 a3
.o 2 0
e_Parsing_lparsePushConstant
	repl_args 2 2
.o 3 0
a3
.d 3 0
	jsr ea3
.o 2 0
	push_a 1
	push_a 1
	buildh _Tuple 2
	updatepop_a 0 2
.d 1 0
	rtn
.n 3 e_Parsing_dparsePushConstant
.o 1 0
e_Parsing_nparsePushConstant
	push_node _cycle_in_spine 3
.d 3 0
	jsr ea3
.o 2 0
	push_a 1
	push_a 1
	fillh _Tuple 2 4
	pop_a 2
.d 1 0
	rtn
.o 6 0
e_Parsing_sparsePushConstant
	jsr_eval 5
.d 6 0
	jmp s3
.o 3 0
ea3
	jsr_eval 2
	jsr_eval 0
	repl_r_args 4 0
.o 6 0
s3
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.23
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.23
	buildAC "push constant "
	buildh ARRAY 1
	build e__SystemArray_dusize;23 1 e__SystemArray_nusize;23
	push_a 6
	build e__SystemArray_dusize;23 1 e__SystemArray_nusize;23
	push_arg 2 3 3
	push_arg 3 3 2
	push_a 2
	build d_S.2 -1 n_S.2
	push_a 3
	build d_S.1 -1 n_S.1
	build _ 2 n25
	push_a 4
	build d_S.2 -1 n_S.2
	push_a 5
	build d_S.1 -1 n_S.1
	build _ 2 n24
	build _ 2 n23
	build _ 2 n22
	push_a 5
	update_a 2 11
	update_a 1 10
	updatepop_a 0 9
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.24
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
.d 2 0
	rtn
else.24
	push_arg 0 2 2
	buildB_b 0
	update_a 1 2
	updatepop_a 0 1
	pop_b 1
.d 2 0
	rtn
.n 2 _ ea25
.o 1 0
n25
	push_node _cycle_in_spine 2
.o 3 0
ea25
.o 3 0
s25
	push_a 0
	jsr_eval 0
	pushI_a 1
	pop_a 1
	pushI 1
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	subI
	push_a 1
	pushI 0
	updatepop_a 0 2
.d 2 2 ii
	jmp s12
.n 2 _ ea24
.o 1 0
n24
	push_node _cycle_in_spine 2
.o 3 0
ea24
.o 3 0
s24
	push_a 0
	jsr_eval 0
	pushI_a 1
	pop_a 1
	pushI 1
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	subI
	push_a 1
	pushI 0
	updatepop_a 0 2
.d 2 2 ii
	jmp s11
.n 2 _ ea23
.o 1 0
n23
	push_node _cycle_in_spine 2
.o 3 0
ea23
.o 3 0
s23
	push_a 1
	jsr_eval 0
	push_a 1
	jsr_eval 0
	buildh _Nil 0
	update_a 0 3
	update_a 0 4
	pop_a 1
.d 1 0
	jsr e_StdList_slength;47
.o 0 1 i
	updatepop_a 0 2
.d 2 1 i
	jmp e_StdList_sdrop
.n 2 _ ea22
.o 1 0
n22
	push_node _cycle_in_spine 2
.o 3 0
ea22
.o 3 0
s22
	push_a 1
	jsr_eval 0
	pushF_a 2
	pop_a 1
	push_a 0
	jsr_eval 0
	updatepop_a 0 2
.d 1 0
	jsr e_StdList_stoString;79
.o 1 0
	buildAC "D=A\n@0\nM=M+1\nA=M\nM=D\n\n"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr catAC
.o 1 0
	buildAC "//push instruction\n@"
.d 2 0
	jsr catAC
.o 1 0
.d 1 2 f
	jsr writeFS
.o 0 2 f
	fillF_b 0 0
	pop_b 2
.d 1 0
	rtn
.o 2 2 ii
s11
	push_b 0
	push_b 2
	ltI
	notB
	jmp_false else.25
	push_a 0
	jsr_eval 0
	push_array 0
	updatepop_a 0 1
	push_b 0
	updatepop_a 0 1
	push_a 0
	select CHAR 0 1
	push_a 0
	buildh ARRAY 1
	push_a 0
	push_b 2
	push_b 2
	build_u _ 1 2 n26
	buildC_b 0
	fillh _Cons 2 4
	pop_a 2
	pop_b 3
.d 1 0
	rtn
else.25
	fillh _Nil 0 1
	pop_a 1
	pop_b 2
.d 1 0
	rtn
.nu 1 2 _ _
.o 1 0
n26
	push_node_u _cycle_in_spine 1 2
.o 2 2 ii
ea26
.o 2 2 ii
s26
	pushI 1
	push_b 1
	addI
	push_a 0
	push_b 2
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	updatepop_a 0 1
	update_b 1 3
	updatepop_b 0 2
.d 2 2 ii
	jmp s11
.o 2 2 ii
s12
	push_b 0
	push_b 2
	ltI
	notB
	jmp_false else.26
	push_a 0
	jsr_eval 0
	push_array 0
	updatepop_a 0 1
	push_b 0
	updatepop_a 0 1
	push_a 0
	select CHAR 0 1
	push_a 0
	buildh ARRAY 1
	push_a 0
	push_b 2
	push_b 2
	build_u _ 1 2 n27
	buildC_b 0
	fillh _Cons 2 4
	pop_a 2
	pop_b 3
.d 1 0
	rtn
else.26
	fillh _Nil 0 1
	pop_a 1
	pop_b 2
.d 1 0
	rtn
.nu 1 2 _ _
.o 1 0
n27
	push_node_u _cycle_in_spine 1 2
.o 2 2 ii
ea27
.o 2 2 ii
s27
	pushI 1
	push_b 1
	addI
	push_a 0
	push_b 2
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	updatepop_a 0 1
	update_b 1 3
	updatepop_b 0 2
.d 2 2 ii
	jmp s12
.o 6 0
s15
	buildAC "\n"
	push_a 5
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_true then.27
	buildAC ""
	push_a 5
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.27
then.27
	push_a 5
	pushB TRUE
	updatepop_a 0 6
.d 1 1 b
	rtn
else.27
	pushI 1
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "//"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.29
	push_a 5
	pushB TRUE
	updatepop_a 0 6
.d 1 1 b
	rtn
else.29
	pushI 12
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "push constant"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.30
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s21
else.30
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "add"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.31
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s20
else.31
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "sub"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.32
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s19
else.32
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "neg"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.33
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s18
else.33
	pushI 2
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "and"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.34
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s17
else.34
	pushI 1
	pushI 0
	push_a 4
.d 1 2 ii
	jsr sliceAC
.o 1 0
	buildAC "or"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr eqAC
.o 0 1 b	
	jmp_false else.35
	push_a 5
	jsr_eval 0
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	push_a 5
	update_a 5 11
	update_a 4 10
	update_a 3 9
	update_a 2 8
	update_a 1 7
	updatepop_a 0 6
.d 6 0
	jmp s16
else.35
	push_a 5
	pushB FALSE
	updatepop_a 0 6
.d 1 1 b
	rtn
.o 6 0
s16
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.36
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.36
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//or instruction\nD=M\nA=A-1\nD=D|M\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.37
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.37
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.o 6 0
s17
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.38
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.38
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//and instruction\nD=M\nA=A-1\nD=D&M\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.39
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.39
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.o 6 0
s18
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.40
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.40
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//neg instruction\nM=-M\nD=M\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.41
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.41
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.o 6 0
s19
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.42
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.42
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//sub instruction\nD=M\nA=A-1\nD=M-D\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.43
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.43
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.o 6 0
s20
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.44
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.44
	push_arg 0 3 3
	push_arg 1 3 2
	buildAC "//add instruction\nD=M\nA=A-1\nD=M+D\nM=D\n\n"
	buildh ARRAY 1
	build _ 2 e_StdFile_nfwrites
	push_a 3
	update_a 2 9
	update_a 1 8
	updatepop_a 0 7
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.45
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.45
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.o 6 0
s21
	push_a 5
	buildI 2
	push_a 3
	buildAC "out.asm"
	buildh ARRAY 1
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
	buildh _Nil 0
	update_a 0 10
	pop_a 1
	jsr_ap 3
	push_arg 0 3 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	notB
	jmp_false else.46
	buildAC "failed to open file"
	updatepop_a 0 7
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.46
	buildAC "push constant "
	buildh ARRAY 1
	build e__SystemArray_dusize;23 1 e__SystemArray_nusize;23
	push_a 6
	buildh ARRAY 1
	build e__SystemArray_dusize;23 1 e__SystemArray_nusize;23
	push_arg 2 3 3
	push_arg 3 3 2
	push_a 2
	build d_S.2 -1 n_S.2
	push_a 3
	build d_S.1 -1 n_S.1
	build _ 2 n31
	push_a 4
	build d_S.2 -1 n_S.2
	push_a 5
	build d_S.1 -1 n_S.1
	build _ 2 n30
	build _ 2 n29
	build _ 2 n28
	push_a 5
	update_a 2 11
	update_a 1 10
	updatepop_a 0 9
	jsr_ap 2
	push_arg 0 2 1
	jsr_eval 0
	pushB_a 0
	pop_a 1
	push_b 0
	notB
	jmp_false else.47
	buildAC "failed to close"
	updatepop_a 0 1
	pop_b 1
.d 1 0
	jsr print_string_
.o 0 0
	halt
	repl_args 2 2
	jsr_eval 0
	pushB_a 0
	pop_a 1
.d 1 1 b
	rtn
else.47
	push_arg 0 2 2
	push_b 0
	updatepop_a 0 1
	updatepop_b 0 1
.d 1 1 b
	rtn
.n 2 _ ea31
.o 1 0
n31
	push_node _cycle_in_spine 2
.o 3 0
ea31
.o 3 0
s31
	push_a 0
	jsr_eval 0
	pushI_a 1
	pop_a 1
	pushI 1
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	subI
	push_a 1
	pushI 0
	updatepop_a 0 2
.d 2 2 ii
	jmp s12
.n 2 _ ea30
.o 1 0
n30
	push_node _cycle_in_spine 2
.o 3 0
ea30
.o 3 0
s30
	push_a 0
	jsr_eval 0
	pushI_a 1
	pop_a 1
	pushI 1
	push_b 1
	update_b 1 2
	update_b 0 1
	pop_b 1
	subI
	push_a 1
	pushI 0
	updatepop_a 0 2
.d 2 2 ii
	jmp s11
.n 2 _ ea29
.o 1 0
n29
	push_node _cycle_in_spine 2
.o 3 0
ea29
.o 3 0
s29
	push_a 1
	jsr_eval 0
	push_a 1
	jsr_eval 0
	buildh _Nil 0
	update_a 0 3
	update_a 0 4
	pop_a 1
.d 1 0
	jsr e_StdList_slength;47
.o 0 1 i
	updatepop_a 0 2
.d 2 1 i
	jmp e_StdList_sdrop
.n 2 _ ea28
.o 1 0
n28
	push_node _cycle_in_spine 2
.o 3 0
ea28
.o 3 0
s28
	push_a 1
	jsr_eval 0
	pushF_a 2
	pop_a 1
	push_a 0
	jsr_eval 0
	updatepop_a 0 2
.d 1 0
	jsr e_StdList_stoString;79
.o 1 0
	buildAC "D=A\n@0\nM=M+1\nA=M\nM=D\n\n"
	push_a 1
	update_a 1 2
	update_a 0 1
	pop_a 1
.d 2 0
	jsr catAC
.o 1 0
	buildAC "//push instruction\n@"
.d 2 0
	jsr catAC
.o 1 0
.d 1 2 f
	jsr writeFS
.o 0 2 f
	fillF_b 0 0
	pop_b 2
.d 1 0
	rtn
