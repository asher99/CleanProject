class Ball{
	
	field int center_x, center_y, radius;
	
	// The direction is the angle from the origin
	field int ball_direction_x, ball_direction_y;

	constructor Ball new(){
	
		let center_x = 255;
		let center_y = 100;
		let radius = 5;
		let ball_direction_x = 1;
		let ball_direction_y = 1;
		
		return this;
	}
	
	method int get_center_x(){
		return center_x;
	}
	
	method int get_center_y(){
		return center_y;
	}
	
	method int get_radius(){
		return radius;
	}
	
	method void flip_direction_y(){
		let ball_direction_y = -ball_direction_y;
		return;
	}
	
	/** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
	
	 method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(center_x, center_y,radius);
        return;
    }
	
	method void movement()
	{
		if (center_x + radius < 511){
			if (center_x - radius > 1 ){
				if (center_y + radius < 255){
					if (center_y - radius > 1){
						do Screen.setColor(false);
						do Screen.drawCircle(center_x, center_y,radius+1);
						let center_x = center_x + ball_direction_x;
						let center_y = center_y + ball_direction_y;
						do Screen.setColor(true);
						do Screen.drawCircle(center_x, center_y,radius);
					}
					else{
						let ball_direction_y = -ball_direction_y;
						let center_y = center_y + 1;
					}
					
				}
				else{
					let ball_direction_y = -ball_direction_y;
					let center_y = center_y - 1;
				}
			}
			else{
				let ball_direction_x = -ball_direction_x;
				let center_x = center_x + 1;
			}
		}
		else{
			let ball_direction_x = -ball_direction_x;
			let center_x = center_x - 1;
		}
		
		return;
	}

}