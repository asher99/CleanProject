class BreakoutGame {

    // The paddle
    field Paddle paddle;
    // The paddle's movement direction
    field int p_direction; // 0=none,1=up,2=down,3=left,4=right
	
	field Ball ball;

	field Wall brickWall;
	
	field int numOfLives;
	
    /** Constructs a new Breakout Game. */
    constructor BreakoutGame new() {
        let paddle = Paddle.new();
        let p_direction = 0;
		
		let ball = Ball.new();
		
		let brickWall = Wall.new();
		/*do DisplayUtils.showCredits();
		do Sys.wait(3400);
		do DisplayUtils.eraseMessage();
		do DisplayUtils.countDown();*/
		let numOfLives = 3;
        return this;
    }
	/** erases all object in main screen */
	method void erase(){
			do ball.erase();
			do paddle.erase();
			do brickWall.erase();
			return;
		}
		
	
    /** Deallocates the object's memory. */
    method void dispose() {
        do paddle.dispose();
		do ball.dispose();
		do brickWall.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;
		let exit = brickWall.isCompletlyBroken();
		
        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do calculate_frame();
            }

            if (key = 81) {
                let exit = true;
            }
            /*if (key = 90) {
                do paddle.decSize();
            }
            if (key = 88) {
                do paddle.incSize();
            }*/
            if (key = 131) {
                let p_direction = 1;
            }
            if (key = 133) {
                let p_direction = 2;
            }
            if (key = 130) {
                let p_direction = 3;
            }
            if (key = 132) {
                let p_direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do calculate_frame();							
            }
		
		if(numOfLives = 0){
			let exit = true;
			do gameOver();
			return;
		}
		
		let exit = brickWall.isCompletlyBroken();
		if(exit){
			do win();
			return;
		}
        }
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method void calculate_frame() {		
		var int paddle_start;
		var int paddle_end;
		var int paddle_edge;
		var int ball_edge;
		var int ball_center_x;
		var int ball_center_y;
		var int pointX;
		var int pointY;
		var int rad;
		var int touchDown;
		
		let paddle_start = paddle.get_placement();
		let paddle_end = paddle.get_placement() + paddle.get_x_size();
		let paddle_edge = paddle.get_hight() - 8;// - paddle.get_y_size();
		let ball_center_x = ball.get_center_x();
		let ball_center_y = ball.get_center_y();


		if (ball_center_x < paddle_end){
			if(ball_center_x > paddle_start){
				if(ball_center_y > paddle_edge){
					do ball_hit_paddle(ball,ball_center_x,paddle_start,paddle_end);
				}
			}
		}
		
		// sets wall display 
		let pointX = ball.get_center_x();
		let pointY = ball.get_center_y();
			
		do brickWall.checkHit(pointX,pointY,ball);
		do brickWall.draw();
		
		
		do ball.movement();
        if (p_direction = 3) {
            do paddle.moveLeft();
        }
        if (p_direction = 4) {
            do paddle.moveRight();
        }
		
		/** in case of ball missing paddle in hiting the floor you lose a life */
		
		/*let rad = ball.get_radius();
		let touchDown = rad + pointY;
		if(touchDown > 254){
			let numOfLives = numOfLives - 1;
			do ball.erase();
			let ball = Ball.new(); 
			do DisplayUtils.DisplayNumOfLives(numOfLives);
		}*/
		
        do Sys.wait(5); // Delays the next movement.
        return;
    }

	method void ball_hit_paddle(Ball ball, int center_x, int pad_start, int pad_end)
	{
		var int pad_len;
		var int x_direction;
		var int current_direction;
		
		let pad_len = pad_end - pad_start;
		//let x_direction = 0;
		let current_direction = ball.get_ball_direction_x();
		
		if(current_direction < 0)
		{
			let x_direction = -1;
			if(center_x < pad_start + (1/4)*pad_len)
			{
				let x_direction = -2;
			}
		}
		
		if(current_direction > 0)
		{
			let x_direction = 1;
			if(center_x > pad_start + (3/4)*pad_len)
			{
				let x_direction = 2;
			}
		}
		
		do ball.set_ball_direction_x(x_direction);
		do ball.flip_direction_y();
		return;
		}	
		
		method void gameOver(){
			
			do erase();
			do DisplayUtils.printGameOver();
			    
			return;
		}
		
		method void win(){
			
			do erase();
			do DisplayUtils.printWin();
			
			return;
		}
}
