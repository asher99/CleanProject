class BreakoutGame {

    // The paddle
    field Paddle paddle;
    // The paddle's movement direction
    field int p_direction; // 0=none,1=up,2=down,3=left,4=right
	
	field Ball ball;

	field Wall brickWall;
	
    /** Constructs a new Breakout Game. */
    constructor BreakoutGame new() {
        let paddle = Paddle.new();
        let p_direction = 0;
		
		let ball = Ball.new();
		
		let brickWall = Wall.new();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do paddle.dispose();
		do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do calculate_frame();
            }

            if (key = 81) {
                let exit = true;
            }
            /*if (key = 90) {
                do paddle.decSize();
            }
            if (key = 88) {
                do paddle.incSize();
            }*/
            if (key = 131) {
                let p_direction = 1;
            }
            if (key = 133) {
                let p_direction = 2;
            }
            if (key = 130) {
                let p_direction = 3;
            }
            if (key = 132) {
                let p_direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do calculate_frame();
            }
        }
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method void calculate_frame() {		
		var int paddle_start;
		var int paddle_end;
		var int paddle_edge;
		var int ball_edge;
		var int ball_center;
		
		let paddle_start = paddle.get_placement();
		let paddle_end = paddle.get_placement() + paddle.get_x_size();
		let paddle_edge = paddle.get_hight();// - paddle.get_y_size();
		let ball_edge = ball.get_center_y() + ball.get_radius();
		let ball_center = ball.get_center_x();

		/*do showCredits();
		do Sys.wait(2000);
		do eraseMessage();*/
		
		if (ball_edge > paddle_edge){
			if(ball_center > paddle_start){
				if(ball_center < paddle_edge){
					do ball.flip_direction_y();
					do Sys.wait(100);
				}
			}
		}
		
		//do brickWall.draw();
		
		do ball.movement();
        if (p_direction = 3) {
            do paddle.moveLeft();
        }
        if (p_direction = 4) {
            do paddle.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }
	
	method void showCredits() {
		do Output.moveCursor(20,16);
		do Output.printString("Atari Breakout");
		do Output.moveCursor(21,22);
		do Output.printString("By Asher & Zvei");
		return;
	}
	
	method void eraseMessage() {
		var String s;
		do Output.moveCursor(20,16);
		let s = "                                                 ";
		do Output.printString(s);
		do Output.moveCursor(21,22);
		do Output.printString(s);
		do s.dispose();
		return;
	}
}
